{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reflect Tables into SQLAlchemy ORM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create engine to hawaii.sqlite\n",
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Precipitation Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('2017-08-23',)\n"
     ]
    }
   ],
   "source": [
    "# Find the most recent date in the data set.\n",
    "recent_date = session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "print(recent_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016-08-23\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x936 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results. \n",
    "# Starting from the most recent data point in the database. \n",
    "\n",
    "# Calculate the date one year from the last date in data set.\n",
    "yr_from_last_date = dt.date(2017,8,23) - dt.timedelta(days=365)\n",
    "print(yr_from_last_date)\n",
    "\n",
    "# Perform a query to retrieve the data and precipitation scores\n",
    "prec_data = session.query(Measurement.date, Measurement.prcp).filter(Measurement.date >= yr_from_last_date).all()\n",
    "\n",
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "precipitation_data = pd.DataFrame(prec_data, columns=['Date','Precipitation'])\n",
    "precipitation_data = precipitation_data.dropna(how='any')\n",
    "\n",
    "# Sort the dataframe by date\n",
    "precipitation_data = precipitation_data.sort_values([\"Date\"], ascending=True)\n",
    "precipitation_data = precipitation_data.set_index(\"Date\")\n",
    "\n",
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "x= precipitation_data.plot.bar(figsize=(15,13), width=15)\n",
    "x.set_xlabel(\"Date\", fontsize=15)\n",
    "x.set_xticklabels([])\n",
    "plt.legend(['Precipitation'], fontsize=15)\n",
    "x.get_legend().set_bbox_to_anchor((1, 1))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Precipitation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2021.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.177279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.461190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Precipitation\n",
       "count    2021.000000\n",
       "mean        0.177279\n",
       "std         0.461190\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.020000\n",
       "75%         0.130000\n",
       "max         6.700000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calcualte the summary statistics for the precipitation data\n",
    "precipitation_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Station Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(19550,)]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to calculate the total number stations in the dataset\n",
    "session.query(func.count(Measurement.date)).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to find the most active stations (i.e. what stations have the most rows?)\n",
    "# List the stations and the counts in descending order.\n",
    "session.query(Measurement.station, func.count(Measurement.date)).group_by(Measurement.station).order_by(func.count(Measurement.date).desc()).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 54.0, 85.0, 71.66378066378067)]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using the most active station id from the previous query, calculate the lowest, highest, and average temperature.\n",
    "most_active=session.query(Measurement.station).group_by(Measurement.station).order_by(func.count(Measurement.date).desc()).first()\n",
    "mas= most_active[0]\n",
    "\n",
    "session.query(Measurement.station, func.min(Measurement.tobs), func.max(Measurement.tobs), func.avg(Measurement.tobs)).filter(Measurement.station==mas).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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rBQAAMCWULUzUOPGjcuBBx7YadlZZ52VvffeO5/4xCcydOjQNDU1Zf78+Rk5cmSSZO3atVm4cGEuvfTSaowMAAD0clULqIaGhk6fupckAwYMyE477ZThw4cnSSZPnpyZM2emubk5Q4cOzYwZMzJw4MBMnDixChMDAAC9XVU/RGJTzjnnnKxZsyZTp05Ne3t7Ro0alXnz5qW+vr7aowEAAL1QTQXUHXfc0elxXV1dpk2blmnTplVpIgAAgP9T9ftAAQAAbC0EFAAAQCEBBQAAUEhAAQAAFBJQAAAAhbocUO3t7T0wBgAAQO3rckDtu+++ef/735877rgjf/vb33piJgAAgJrU5YA644wzct999+V973tf9t1335x33nm59957e2I2AACAmtLlgLrsssvy61//OrfeemuOPPLI3HTTTTnyyCMzcuTIXHXVVXn00Ud7YEwAAIDq26wPkairq8tb3/rWtLS05Pe//32+/OUvp7m5OVdffXVGjhyZo48+Otdff73rpQAAgG3Ky/4Uvle96lU5/vjj8/GPfzxHH310KpVK7rnnnnz84x/Pfvvtl6lTp+aZZ57pjlkBAACqqu/LefIf/vCHfOc738nNN9+cJUuW5DWveU3OPvvsnHzyyenXr1+uv/76zJkzJ48//ni+9a1vddfMAAAAVdHlgFq5cmW++93v5qabbsr999+ffv365ZhjjslVV12Vww8/PH36/N9JrcsvvzxNTU2ZPn16tw4NAABQDV0OqGHDhuX555/PwQcfnM9//vOZMGFCdtxxx41u39zcnF122eVlDQkAAFALuhxQ55xzTk4++eTsvffeRdsfddRROeqoo7o8GAAAQK3pckB96lOf6ok5AAAAal6XP4XvxhtvzKmnnrrR9e9///t9YAQAALBN6nJAfeUrX0lTU9NG1w8aNChz5sx5WUMBAADUoi4H1B/+8Ifsv//+G12/33775ZFHHnlZQwEAANSiLgdUXV1dVq5cudH1Tz75ZNavX/+yhgIAAKhFXQ6o17/+9bn55puzdu3aDdatWbMmN998c0aMGNEtwwEAANSSLgfUJz7xibS2tubII4/M9773vbS2tuaRRx7J9773vRx99NFpbW3NJz7xiZ6YFQAAoKq6/DHmb3vb23LNNdfk/PPPz6RJkzqWVyqV1NfX50tf+lLe/va3d+uQAAAAtaDLAZUkJ510UsaNG5e77rorjz76aCqVSl772tdm7Nixqa+v7+4ZAQAAasJmBVSS1NfXZ/z48d05CwAAQE3b7IBatWpVHnvssTz11FOpVCobrD/00ENf1mAAAAC1pssB1d7envPPPz+33HJL1q1bl+Tv1z/V1dV1+vuTTz7ZvZMCAABUWZcDasqUKbn99ttz+umn59BDD01DQ0MPjAUAAFB7uhxQP/7xj/PhD384n/vc53piHgAAgJrV5ftA9evXL3vvvXdPzAIAAFDTuhxQ48ePz49+9KOemAUAAKCmdTmgPvrRj2bZsmX5yEc+knvvvTfLli3LE088scEfAACAbU2Xr4EaNWpU6urq8stf/jI33XTTRrfzKXwAAMC2pssBdf7553d8ZDkAAEBv0uWAmjZtWk/MAQAAUPO6fA3UP1u3bl2efPLJPP/88901DwAAQM3arIC6//77c9xxx2W33XbL0KFDc/fddydJVq5cmfe85z353//9324dEgAAoBZ0OaB+8Ytf5Jhjjskf//jHnHTSSalUKh3rdt5556xevTo33nhjtw4JAABQC7ocUJdddln23nvvLFq0KBdffPEG69/ylrfk//2//9ctwwEAANSSLgfU/fffn/e973151ate9aKfxrf77runra2tW4YDAACoJV0OqD59+qRPn40/ra2tLf37939ZQwEAANSiLgfUG97whvzwhz980XXPPfdcbr755hx88MEvezAAAIBa0+WA+sQnPpGf/vSnOfvss/Pggw8mSZYtW5Yf//jHOfbYY/PHP/4x5557brcPCgAAUG1dvpHu2972tlx77bWZOnVqvvWtbyVJJk+enEqlkh133DFz5szJG9/4xm4fFAAAoNq6HFBJMnHixBxzzDG56667snjx4qxfvz6vfe1rc/jhh2f77bfv7hkBAABqwmYFVJIMGDAg73znO7tzFgAAgJrW5YD685//XLTdnnvu2eVhAAAAalmXA2rEiBEvev+nF3ryySc3ayAAAIBa1eWA+vd///cNAmrdunVZsmRJvv3tb+c1r3lNTjvttG4bEAAAoFZ0OaBOOeWUja6bMmVKxo4dm9WrV7+soQAAAGpRl+8D9VK23377nHLKKbnmmmu688sCAADUhG4NqCR5xStekaVLl3b3lwUAAKi6bg2oBx98MP/xH/+Rfffdtzu/LAAAQE3otk/he/rpp/PMM89k++23z+zZs7tlOAAAgFrS5YA69NBDNwiourq6NDQ05HWve12OP/74NDQ0dNd8AAAANaPLAdXS0tITcwAAANS8bv8QCQAAgG1Vl89AXXnllV3+JnV1dTn//PO7/DwAAIBa0uWAuuKKKzqugapUKp3WvdRyAQUAAGztuhxQv/vd73LCCSdk2LBhmTx5coYOHZokaW1tTUtLSx5++OHcfPPNaWpq6vZhAQAAqqnL10Cdf/75GTJkSK677roceOCBqa+vT319fUaOHJkvf/nLGTx4sLNNAADANqnLATV//vwcdthhG13/tre9LfPnz385MwEAANSkLgfUdtttl1//+tcbXf/AAw+kTx8f7gcAAGx7ulw6xx57bL7+9a9n5syZWbVqVcfyVatWZcaMGfnGN76R8ePHd+uQAAAAtaDLHyJx+eWX549//GMuv/zyTJ8+Pa95zWtSV1eXtra2rFu3Loceemguv/zynpgVAACgqrocUPX19bntttvygx/8IHfeeWcee+yxVCqVHHHEETniiCNy9NFH98ScAAAAVdflgPqHo48+WiwBAAC9ymYH1J///OfcfffdeeKJJzJhwoTsscceef755/PUU09lp512St++m/2lAQAAatJmVc5FF12U6667LuvWrUtdXV1GjBiRPfbYI3/9618zcuTIXHjhhTnrrLO6e1YAAICq6vKn8H3xi19MS0tLzjrrrNx6662pVCod63bYYYeMGzcut99+e7cOCQAAUAu6HFA33HBD3vOe9+SSSy7JAQccsMH6/fffP3/4wx+6ZTgAAIBa0uWAeuyxxzJmzJiNrq+vr8/TTz/9soYCAACoRV0OqFe/+tVZtmzZRtf/5je/ya677vqyhgIAAKhFXQ6oI444IjfccENWrly5wbpf/epX+cY3vpFx48Z1y3AAAAC1pMsBddFFF6VPnz4ZM2ZMPvvZz6auri7f/OY388EPfjDveMc7sttuu2Xq1Kk9MSsAAEBVdTmgmpqa8pOf/CRHHXVU/uu//iuVSiU333xzfvzjH+fEE0/Mf//3f6ehoaEHRgUAAKiuLt0H6m9/+1t+8YtfZNCgQZk1a1ZmzZqVFStWZP369dlll13Sp0+XewwAAGCr0aXi2W677XLcccflrrvu6li2yy675DWveY14AgAAtnldqp4+ffpk8ODBWb16dU/NAwAAULO6fNrozDPPzPXXX58nnniiJ+YBAACoWV26BipJVq9enYEDB2bkyJEZN25c9tprr/Tv37/TNnV1dfnYxz7WbUMCAADUgi4H1Gc/+9mOv3/nO9950W0EFAAAsC0qCqhzzz0373vf+3LggQfmV7/6VSqVSp566qnssMMO6du3yw0GAACwVSqqn69+9as55JBDcuCBB2bw4MF58sknc+CBB+aWW27JW9/61p6eEQAAoCZs9mePVyqV7pwDAACg5rl5EwAAQKGqBdSXv/zljBkzJnvuuWf23HPPvOMd78idd97Zsb5SqWT69OkZNmxYBg0alHHjxuWhhx6q1rgAAADln8L36KOP5r777kuSPPPMM0mS1tbWbL/99i+6/ahRo17y6+2222655JJLsvfee2f9+vX5z//8z5xyyin5yU9+kn/5l3/JrFmzMnv27MyePTvNzc256qqrMmHChNx7772pr68vHRsAAKDb1LW3t2/yYqaddtopdXV1nZZVKpUNlv3z8ieffLLLw+y11175zGc+k3/913/NsGHDcvrpp+e8885LkqxZsybNzc257LLLMmnSpC5/7d6itbU1zc3N1R6DbYz9atvW8LXHqz0CwCa1T9q9Kt/X70BeqOgM1OzZs3t0iHXr1uXWW2/Ns88+m4MPPjhLlixJW1tbxo4d27FN//79M2bMmCxatEhAAQAAVVEUUO9973t75Jv/5je/yRFHHJG1a9dm4MCB+cY3vpH9998/ixYtSpI0NjZ22r6xsTFLly59ya/Z2traI7NuTbwG9AT71bZsQLUHANikav4e8juwd9nUGceq3gW3ubk5P/vZz/L000/ntttuy+TJk3P77bd3rC992+ALv2Zv5jQzPcF+tY1b4C18QO2r1u8hvwN5oaoGVL9+/fK6170uSXLggQfm/vvvzzXXXNNx3dPy5cuzxx57dGy/YsWKDc5KAQAAbCk1dR+o9evX57nnnsuQIUPS1NSU+fPnd6xbu3ZtFi5cmNGjR1dxQgAAoDer2hmoz372szniiCOy++67Z/Xq1Zk7d24WLFiQm266KXV1dZk8eXJmzpyZ5ubmDB06NDNmzMjAgQMzceLEao0MAAD0clULqLa2tpxxxhlZvnx5dthhh+y///6ZO3duDj/88CTJOeeckzVr1mTq1Klpb2/PqFGjMm/ePPeAAgAAqqboPlBsPVzoSE+wX23b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sCC///3vkyS/+93v8rOf/SzveMc7kvi/FRtyBmor8+ijj+YrX/lKzjzzzEyZMiUPPvhgLrjggiTJGWeckba2tiR50ZsPL126dIvPy9ZhU/tVkrz97W/Pu971rgwZMiR/+tOfcvnll+fYY4/NT37yk7zyla+s5vhsBebPn58lS5bk1FNPTRLHKrrFC/erxLGKrpsyZUpWr16d0aNHZ7vttsvzzz+f8847r+PyEccrXkhAbWXWr1+fAw88MJ/5zGeSJK9//euzePHizJkzp+M/uombD9M1JfvV8ccf37H9/vvvnze84Q054IADcuedd+bYY4+tytxsPW644YaMHDkyI0aM6LTcsYqX48X2K8cqumrevHn59re/nTlz5mTYsGF58MEHc+GFF2bw4MF5//vf37Gd4xX/4C18W5mmpqbsu+++nZbts88+eeyxxzrWJ3HzYbpkU/vVi9l1112z2267ZfHixT09Hlu5J554It///vfzgQ98oGOZYxUv14vtVy/GsYpNufjii3P22Wfn+OOPz/7775+TTjopZ511Vv7t3/4tieMVGxJQW5lDDjkkjzzySKdljzzySPbcc88kf7/wsampqdPNh9euXZuFCxe6+TAbtan96sWsXLkyS5cudaE2m/TNb34zr3zlK/Pud7+7Y5ljFS/Xi+1XL8axik3561//mu22267Tsu222y7r169P4njFhryFbytz5pln5ogjjsiMGTPy7ne/Ow888ECuu+66fPrTn07y99PLkydPzsyZM9Pc3JyhQ4dmxowZGThwYCZOnFjl6alVm9qvVq9enSuuuCLHHntsmpqa8qc//SmXXnppGhsb8853vrPK01PLKpVKvv71r+fd7353p4/6dazi5djYfuVYxeY46qij8oUvfCFDhgzJsGHD8sADD2T27Nk56aSTkjhesaG69vb2yqY3o5bceeedufTSS/PII49kjz32yOmnn54Pf/jDHe/DrVQqueKKK3L99denvb09o0aNyowZMzJ8+PAqT04te6n9as2aNTnllFPywAMP5Omnn05TU1Pe8pa35JOf/GT22GOPao9ODfvpT3+aY489Nv/zP/+TUaNGdVrnWMXm2th+5VjF5li1alU+97nP5fbbb8+KFSvS1NSU448/Pueff35e9apXJXG8ojMBBQAAUMg1UAAAAIUEFAAAQCEBBQAAUEhAAQAAFBJQAAAAhQQUAABAIQEFAABQSEABAAAUElAAAACF/j8Vlr7Y1Ts5ZAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Using the most active station id\n",
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n",
    "temp_data=session.query(Measurement.tobs).filter(Measurement.station==mas).filter(Measurement.date>=yr_from_last_date).all()\n",
    "\n",
    "temp_df = pd.DataFrame(temp_data, columns=[\"tobs\"])\n",
    "plt.figure(figsize=(12,10))\n",
    "plt.hist(temp_df[\"tobs\"], bins=12)\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.legend([\"tobs\"])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Close session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Close Session\n",
    "session.close()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "nteract": {
   "version": "0.12.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
